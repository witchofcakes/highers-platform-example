{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useForm = (initialValues, callback) => {\n  _s();\n\n  const [inputs, setInputs] = useState(initialValues);\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    callback();\n  };\n\n  const handleInputChange = event => {\n    event.persist();\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    setInputs(inputs => ({ ...inputs,\n      [name]: value\n    }));\n  };\n\n  return {\n    handleSubmit,\n    handleInputChange,\n    inputs\n  };\n};\n\n_s(useForm, \"g3Zm/qd44sG4b9YKRJ+c7za2HgA=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/tanya/WebstormProjects/platform/client/src/components/formHooks.js"],"names":["useState","useForm","initialValues","callback","inputs","setInputs","handleSubmit","event","preventDefault","handleInputChange","persist","target","value","type","checked","name"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,QAAhB,KAA6B;AAAA;;AACzC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACE,aAAD,CAApC;;AACA,QAAMI,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AACXL,IAAAA,QAAQ;AACX,GAHD;;AAIA,QAAMM,iBAAiB,GAAIF,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACG,OAAN;AACA,UAAMC,MAAM,GAAGJ,KAAK,CAACI,MAArB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,KAAgB,UAAhB,GAA6BF,MAAM,CAACG,OAApC,GAA8CH,MAAM,CAACC,KAAnE;AACA,UAAMG,IAAI,GAAGJ,MAAM,CAACI,IAApB;AACAV,IAAAA,SAAS,CAACD,MAAM,KAAK,EAAC,GAAGA,MAAJ;AAAY,OAACW,IAAD,GAAQH;AAApB,KAAL,CAAP,CAAT;AACH,GAND;;AAOA,SAAO;AACHN,IAAAA,YADG;AAEHG,IAAAA,iBAFG;AAGHL,IAAAA;AAHG,GAAP;AAKH,CAlBD;;GAAMH,O;;AAmBN,eAAeA,OAAf","sourcesContent":["import {useState} from 'react';\r\n\r\nconst useForm = (initialValues, callback) => {\r\n    const [inputs, setInputs] = useState(initialValues);\r\n    const handleSubmit = (event) => {\r\n        if (event) event.preventDefault();\r\n        callback();\r\n    }\r\n    const handleInputChange = (event) => {\r\n        event.persist();\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        setInputs(inputs => ({...inputs, [name]: value}));\r\n    }\r\n    return {\r\n        handleSubmit,\r\n        handleInputChange,\r\n        inputs\r\n    };\r\n}\r\nexport default useForm;"]},"metadata":{},"sourceType":"module"}