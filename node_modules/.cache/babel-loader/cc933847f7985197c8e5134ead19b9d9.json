{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanya\\\\WebstormProjects\\\\platform\\\\client\\\\src\\\\components\\\\tester.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Test extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      errors: {\n        name: '',\n        email: '',\n        password: ''\n      }\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  validate(name, email, password) {\n    // we are going to store errors for all fields\n    // in a signle array\n    const errors = [];\n\n    if (name.length === 0) {\n      errors.push(\"Name can't be empty\");\n    }\n\n    if (email.length < 5) {\n      errors.push(\"Email should be at least 5 charcters long\");\n    }\n\n    if (email.split(\"\").filter(x => x === \"@\").length !== 1) {\n      errors.push(\"Email should contain a @\");\n    }\n\n    if (email.indexOf(\".\") === -1) {\n      errors.push(\"Email should contain at least one dot\");\n    }\n\n    if (password.length < 6) {\n      errors.push(\"Password should be at least 6 characters long\");\n    }\n\n    return errors;\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const name = ReactDOM.findDOMNode(this._nameInput).value;\n    const email = ReactDOM.findDOMNode(this._emailInput).value;\n    const password = ReactDOM.findDOMNode(this._passwordInput).value;\n    const errors = validate(name, email, password);\n\n    if (errors.length > 0) {\n      this.setState({\n        errors\n      });\n      return;\n    } // submit the data...\n\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [errors.map(error => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, error, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInput => this._nameInput = nameInput,\n        type: \"text\",\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: emailInput => this._emailInput = emailInput,\n        type: \"text\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: passwordInput => this._passwordInput = passwordInput,\n        type: \"password\",\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/tanya/WebstormProjects/platform/client/src/components/tester.js"],"names":["React","ReactDOM","Test","Component","constructor","state","errors","name","email","password","handleSubmit","bind","validate","length","push","split","filter","x","indexOf","e","preventDefault","findDOMNode","_nameInput","value","_emailInput","_passwordInput","setState","render","map","error","nameInput","emailInput","passwordInput"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport default class Test extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            errors: {\r\n                name: '',\r\n                email: '',\r\n                password: '',\r\n            }\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    validate(name, email, password) {\r\n        // we are going to store errors for all fields\r\n        // in a signle array\r\n        const errors = [];\r\n\r\n        if (name.length === 0) {\r\n            errors.push(\"Name can't be empty\");\r\n        }\r\n\r\n        if (email.length < 5) {\r\n            errors.push(\"Email should be at least 5 charcters long\");\r\n        }\r\n        if (email.split(\"\").filter(x => x === \"@\").length !== 1) {\r\n            errors.push(\"Email should contain a @\");\r\n        }\r\n        if (email.indexOf(\".\") === -1) {\r\n            errors.push(\"Email should contain at least one dot\");\r\n        }\r\n\r\n        if (password.length < 6) {\r\n            errors.push(\"Password should be at least 6 characters long\");\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const name = ReactDOM.findDOMNode(this._nameInput).value;\r\n        const email = ReactDOM.findDOMNode(this._emailInput).value;\r\n        const password = ReactDOM.findDOMNode(this._passwordInput).value;\r\n\r\n        const errors = validate(name, email, password);\r\n        if (errors.length > 0) {\r\n            this.setState({ errors });\r\n            return;\r\n        }\r\n\r\n        // submit the data...\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                {errors.map(error => (\r\n                    <p key={error}>Error: {error}</p>\r\n                ))}\r\n                <input\r\n                    ref={nameInput => (this._nameInput = nameInput)}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                />\r\n                <input\r\n                    ref={emailInput => (this._emailInput = emailInput)}\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                />\r\n                <input\r\n                    ref={passwordInput => (this._passwordInput = passwordInput)}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                />\r\n\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}