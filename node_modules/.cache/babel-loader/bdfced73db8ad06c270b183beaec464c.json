{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanya\\\\WebstormProjects\\\\platform\\\\client\\\\src\\\\components\\\\candidate\\\\DropzoneResume.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Check } from \"react-feather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\nexport default function DropzoneResume(props) {\n  _s();\n\n  const {\n    acceptedFiles,\n    fileRejections,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    maxFiles: 1\n  });\n  const acceptedFileItems = acceptedFiles.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Check, {\n      size: 20,\n      color: \"green\",\n      className: \"check-green-accepted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), \"\\xA0\", file.path]\n  }, file.path, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        className: 'dropzone'\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag 'n' drop some files here, or click to select files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"(2 files are the maximum number of files you can drop here)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: acceptedFileItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n} // import React, { useState } from 'react';\n//\n// import { DropzoneComponent } from 'react-dropzone-component';\n//\n// import 'dropzone/dist/dropzone.css';\n// import 'react-dropzone-component/styles/filepicker.css';\n//\n// // import { employees_resumes, storage } from '../../../../configs/google/firebase/index';\n//\n// const BytesToMegaBytes = (size) => +((size * 1e-6).toFixed(2));\n//\n//\n// export default function DropzoneResume() {\n//     var ReactDOMServer = require('react-dom/server');\n// // ({\n// //                             // Data\n// //                             jobName,\n// //                             errorFields,\n// //                             errorStatus,\n// //                             // OnChange Events\n// //                             onChange\n// //                         }) => {\n// //     const [state, setState] = useState({\n// //         progress: null\n// //     });\n//\n//     const djsConfig = {\n//         autoProcessQueue: false,\n//         maxFiles: 1,\n//         // progress: null,\n//         dictDefaultMessage: 'Перетягни файл або клікни тут, щоб завантажити',\n//         dictResponseError:\n//             'Файл не завантажується :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\n//         dictMaxFilesExceeded: 'Тільки один файл. Видали попередні, щоб завантажити новий.',\n//         dictRemoveFile: 'Видалити файл',\n//         dictCancelUpload: 'Відмінити',\n//         dictUploadCanceled: 'Відмінилось',\n//         dictInvalidFileType: 'Такий тип файлу не підтримується',\n//         dictFallbackMessage:\n//             'Твій браузер не підтримує drag&drop. Напиши нам у Telegram, ми одразу вирішимо проблему.',\n//         dictFallbackText:\n//             'Щось тут не так :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\n//         dictFileTooBig:\n//             'Файл занадто великий. Максимальний розмір 10Мб. Скористайся сервісами для зниження якості файлу.',\n//         dictCancelUploadConfirmation: 'Точно відмінити завантаження?',\n//         addRemoveLinks: true,\n//         maxFilesize: 10,\n//         previewTemplate: ReactDOMServer.renderToStaticMarkup(\n//             <div className=\"dz-preview dz-file-preview\">\n//                 <div className=\"dz-details\">\n//                     <div className=\"dz-filename\"><span data-dz-name=\"true\"></span></div>\n//                     <img data-dz-thumbnail=\"true\" />\n//                 </div>\n//                 <div className=\"dz-progress\"><span className=\"dz-upload\" data-dz-uploadprogress=\"true\"></span></div>\n//                 <div className=\"dz-success-mark\"><span>✔</span></div>\n//                 <div className=\"dz-error-mark\"><span>✘</span></div>\n//                 <div className=\"dz-error-message\"><span data-dz-errormessage=\"true\"></span></div>\n//             </div>\n//         )\n//     };\n//\n//     const componentConfig = {\n//         iconFiletypes: ['.jpg', '.png', '.gif', '.pdf', '.doc', '.docx'],\n//         showFiletypeIcon: false,\n//         postUrl: 'no-url',\n//     };\n//\n//     let dropzone = null;\n//\n//     // /* Delegate the task in the Firebase method */\n//     // const onSendResume = file => onFirebaseSave(file);\n//     //\n//     // const onFirebaseSave = file => {\n//     //     /* Save current timeString */\n//     //     const\n//     //         timeString = new Date().toISOString(),\n//     //         fileName = file.name,\n//     //         fileSize = BytesToMegaBytes(file.size),\n//     //         fileNameFirebase = `${timeString}-${jobName}-${fileName}`;\n//     //     /* Upload task in Firebase engine */\n//     //     const uploadTask = storage\n//     //         .ref(`${employees_resumes}`)\n//     //         .child(fileNameFirebase)\n//     //         .put(file);\n//     //     /* Push the data in the storage */\n//     //     uploadTask.on(\n//     //         'state_changed',\n//     //         async snapshot => {\n//     //             // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//     //             setState({\n//     //                 ...state,\n//     //                 progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n//     //             });\n//     //         },\n//     //         err => {\n//     //             console.log(err);\n//     //             // A full list of error codes is available at\n//     //             // https://firebase.google.com/docs/storage/web/handle-errors\n//     //         },\n//     //         complete => {\n//     //             storage\n//     //                 .ref(employees_resumes)\n//     //                 .child(fileNameFirebase)\n//     //                 .getDownloadURL()\n//     //                 .then(url => {\n//     //                     onChange({\n//     //                         fileData: url,\n//     //                         fileName: fileName,\n//     //                         fileSize: fileSize\n//     //                     });\n//     //                 });\n//     //         },\n//     //     );\n//     // };\n//     //\n//     // const onRemoveResume = file => {\n//     //     /* Set the <unknown> filename and null file data to the resume params */\n//     //     onChange({\n//     //         fileName: \"<unknown>\",\n//     //         fileSize: null,\n//     //         fileData: null,\n//     //     });\n//     // };\n//     //\n//     // // For a list of all possible events (there are many), see README.md!\n//     // const eventHandlers = {\n//     //     init: dz => (dropzone = dz),\n//     //     drop: [\n//     //         // If you want to attach multiple callbacks, simply\n//     //         // create an array filled with all your callbacks.\n//     //     ],\n//     //     addedfile: file => onSendResume(file),\n//     //     complete: file => onSendResume(file),\n//     //     removedfile: file => onRemoveResume(file)\n//     // };\n//\n//     return (\n//         <div className=\"dropzone-wrapper\">\n//             <DropzoneComponent\n//                 config={componentConfig}\n//                 // className={(() => {\n//                 //     return errorFields.includes('fileData') &&\n//                 //     errorStatus >= 400\n//                 //         ? 'required-field'\n//                 //         : null;\n//                 // })()}\n//                 // eventHandlers={eventHandlers}\n//                 djsConfig={djsConfig}\n//             />\n//         </div>\n//     );\n// };\n//\n\n_s(DropzoneResume, \"6ccwQsHL2ktgMpbjlTzYY8ed4Dg=\", false, function () {\n  return [useDropzone];\n});\n\n_c = DropzoneResume;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropzoneResume\");","map":{"version":3,"sources":["C:/Users/tanya/WebstormProjects/platform/client/src/components/candidate/DropzoneResume.js"],"names":["React","useDropzone","Check","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","DropzoneResume","props","acceptedFiles","fileRejections","getRootProps","getInputProps","maxFiles","acceptedFileItems","map","file","path","className"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,KAAR,QAAoB,eAApB;;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE,CADQ;AAEdC,EAAAA,OAAO,EAAE,MAFK;AAGdC,EAAAA,aAAa,EAAE,QAHD;AAIdC,EAAAA,UAAU,EAAE,QAJE;AAKdC,EAAAA,OAAO,EAAE,MALK;AAMdC,EAAAA,WAAW,EAAE,CANC;AAOdC,EAAAA,YAAY,EAAE,CAPA;AAQdC,EAAAA,WAAW,EAAE,SARC;AASdC,EAAAA,WAAW,EAAE,QATC;AAUdC,EAAAA,eAAe,EAAE,SAVH;AAWdC,EAAAA,KAAK,EAAE,SAXO;AAYdC,EAAAA,OAAO,EAAE,MAZK;AAadC,EAAAA,UAAU,EAAE;AAbE,CAAlB;AAgBA,MAAMC,WAAW,GAAG;AAChBN,EAAAA,WAAW,EAAE;AADG,CAApB;AAIA,MAAMO,WAAW,GAAG;AAChBP,EAAAA,WAAW,EAAE;AADG,CAApB;AAIA,MAAMQ,WAAW,GAAG;AAChBR,EAAAA,WAAW,EAAE;AADG,CAApB;AAIA,eAAe,SAASS,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC1C,QAAM;AACFC,IAAAA,aADE;AAEFC,IAAAA,cAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA;AAJE,MAKFxB,WAAW,CAAC;AACZyB,IAAAA,QAAQ,EAAC;AADG,GAAD,CALf;AASA,QAAMC,iBAAiB,GAAGL,aAAa,CAACM,GAAd,CAAkBC,IAAI,iBAC5C;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAE,EAAb;AAAiB,MAAA,KAAK,EAAE,OAAxB;AAAiC,MAAA,SAAS,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,YADJ,UACgFA,IAAI,CAACC,IADrF;AAAA,KAAUD,IAAI,CAACC,IAAf;AAAA;AAAA;AAAA;AAAA,UADsB,CAA1B;AAMA,sBACI;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA,4BACI,oBAASN,YAAY,CAAC;AAAEO,QAAAA,SAAS,EAAE;AAAb,OAAD,CAArB;AAAA,8BACI,sBAAWN,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAahMwBP,c;UAMhBnB,W;;;KANgBmB,c","sourcesContent":["import React from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport {Check} from \"react-feather\"\r\n\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '20px',\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: '#eeeeee',\r\n    borderStyle: 'dashed',\r\n    backgroundColor: '#fafafa',\r\n    color: '#bdbdbd',\r\n    outline: 'none',\r\n    transition: 'border .24s ease-in-out'\r\n};\r\n\r\nconst activeStyle = {\r\n    borderColor: '#2196f3'\r\n};\r\n\r\nconst acceptStyle = {\r\n    borderColor: '#00e676'\r\n};\r\n\r\nconst rejectStyle = {\r\n    borderColor: '#ff1744'\r\n};\r\n\r\nexport default function DropzoneResume(props) {\r\n    const {\r\n        acceptedFiles,\r\n        fileRejections,\r\n        getRootProps,\r\n        getInputProps\r\n    } = useDropzone({\r\n        maxFiles:1\r\n    });\r\n\r\n    const acceptedFileItems = acceptedFiles.map(file => (\r\n        <div key={file.path}>\r\n            <Check size={20} color={\"green\"} className={\"check-green-accepted\"}/>&nbsp;{file.path}\r\n        </div>\r\n    ));\r\n\r\n    return (\r\n        <section className=\"container\">\r\n            <div {...getRootProps({ className: 'dropzone' })}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag 'n' drop some files here, or click to select files</p>\r\n                <p>(2 files are the maximum number of files you can drop here)</p>\r\n                <div>{acceptedFileItems}</div>\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n//\r\n// import { DropzoneComponent } from 'react-dropzone-component';\r\n//\r\n// import 'dropzone/dist/dropzone.css';\r\n// import 'react-dropzone-component/styles/filepicker.css';\r\n//\r\n// // import { employees_resumes, storage } from '../../../../configs/google/firebase/index';\r\n//\r\n// const BytesToMegaBytes = (size) => +((size * 1e-6).toFixed(2));\r\n//\r\n//\r\n// export default function DropzoneResume() {\r\n//     var ReactDOMServer = require('react-dom/server');\r\n// // ({\r\n// //                             // Data\r\n// //                             jobName,\r\n// //                             errorFields,\r\n// //                             errorStatus,\r\n// //                             // OnChange Events\r\n// //                             onChange\r\n// //                         }) => {\r\n// //     const [state, setState] = useState({\r\n// //         progress: null\r\n// //     });\r\n//\r\n//     const djsConfig = {\r\n//         autoProcessQueue: false,\r\n//         maxFiles: 1,\r\n//         // progress: null,\r\n//         dictDefaultMessage: 'Перетягни файл або клікни тут, щоб завантажити',\r\n//         dictResponseError:\r\n//             'Файл не завантажується :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\r\n//         dictMaxFilesExceeded: 'Тільки один файл. Видали попередні, щоб завантажити новий.',\r\n//         dictRemoveFile: 'Видалити файл',\r\n//         dictCancelUpload: 'Відмінити',\r\n//         dictUploadCanceled: 'Відмінилось',\r\n//         dictInvalidFileType: 'Такий тип файлу не підтримується',\r\n//         dictFallbackMessage:\r\n//             'Твій браузер не підтримує drag&drop. Напиши нам у Telegram, ми одразу вирішимо проблему.',\r\n//         dictFallbackText:\r\n//             'Щось тут не так :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\r\n//         dictFileTooBig:\r\n//             'Файл занадто великий. Максимальний розмір 10Мб. Скористайся сервісами для зниження якості файлу.',\r\n//         dictCancelUploadConfirmation: 'Точно відмінити завантаження?',\r\n//         addRemoveLinks: true,\r\n//         maxFilesize: 10,\r\n//         previewTemplate: ReactDOMServer.renderToStaticMarkup(\r\n//             <div className=\"dz-preview dz-file-preview\">\r\n//                 <div className=\"dz-details\">\r\n//                     <div className=\"dz-filename\"><span data-dz-name=\"true\"></span></div>\r\n//                     <img data-dz-thumbnail=\"true\" />\r\n//                 </div>\r\n//                 <div className=\"dz-progress\"><span className=\"dz-upload\" data-dz-uploadprogress=\"true\"></span></div>\r\n//                 <div className=\"dz-success-mark\"><span>✔</span></div>\r\n//                 <div className=\"dz-error-mark\"><span>✘</span></div>\r\n//                 <div className=\"dz-error-message\"><span data-dz-errormessage=\"true\"></span></div>\r\n//             </div>\r\n//         )\r\n//     };\r\n//\r\n//     const componentConfig = {\r\n//         iconFiletypes: ['.jpg', '.png', '.gif', '.pdf', '.doc', '.docx'],\r\n//         showFiletypeIcon: false,\r\n//         postUrl: 'no-url',\r\n//     };\r\n//\r\n//     let dropzone = null;\r\n//\r\n//     // /* Delegate the task in the Firebase method */\r\n//     // const onSendResume = file => onFirebaseSave(file);\r\n//     //\r\n//     // const onFirebaseSave = file => {\r\n//     //     /* Save current timeString */\r\n//     //     const\r\n//     //         timeString = new Date().toISOString(),\r\n//     //         fileName = file.name,\r\n//     //         fileSize = BytesToMegaBytes(file.size),\r\n//     //         fileNameFirebase = `${timeString}-${jobName}-${fileName}`;\r\n//     //     /* Upload task in Firebase engine */\r\n//     //     const uploadTask = storage\r\n//     //         .ref(`${employees_resumes}`)\r\n//     //         .child(fileNameFirebase)\r\n//     //         .put(file);\r\n//     //     /* Push the data in the storage */\r\n//     //     uploadTask.on(\r\n//     //         'state_changed',\r\n//     //         async snapshot => {\r\n//     //             // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n//     //             setState({\r\n//     //                 ...state,\r\n//     //                 progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\r\n//     //             });\r\n//     //         },\r\n//     //         err => {\r\n//     //             console.log(err);\r\n//     //             // A full list of error codes is available at\r\n//     //             // https://firebase.google.com/docs/storage/web/handle-errors\r\n//     //         },\r\n//     //         complete => {\r\n//     //             storage\r\n//     //                 .ref(employees_resumes)\r\n//     //                 .child(fileNameFirebase)\r\n//     //                 .getDownloadURL()\r\n//     //                 .then(url => {\r\n//     //                     onChange({\r\n//     //                         fileData: url,\r\n//     //                         fileName: fileName,\r\n//     //                         fileSize: fileSize\r\n//     //                     });\r\n//     //                 });\r\n//     //         },\r\n//     //     );\r\n//     // };\r\n//     //\r\n//     // const onRemoveResume = file => {\r\n//     //     /* Set the <unknown> filename and null file data to the resume params */\r\n//     //     onChange({\r\n//     //         fileName: \"<unknown>\",\r\n//     //         fileSize: null,\r\n//     //         fileData: null,\r\n//     //     });\r\n//     // };\r\n//     //\r\n//     // // For a list of all possible events (there are many), see README.md!\r\n//     // const eventHandlers = {\r\n//     //     init: dz => (dropzone = dz),\r\n//     //     drop: [\r\n//     //         // If you want to attach multiple callbacks, simply\r\n//     //         // create an array filled with all your callbacks.\r\n//     //     ],\r\n//     //     addedfile: file => onSendResume(file),\r\n//     //     complete: file => onSendResume(file),\r\n//     //     removedfile: file => onRemoveResume(file)\r\n//     // };\r\n//\r\n//     return (\r\n//         <div className=\"dropzone-wrapper\">\r\n//             <DropzoneComponent\r\n//                 config={componentConfig}\r\n//                 // className={(() => {\r\n//                 //     return errorFields.includes('fileData') &&\r\n//                 //     errorStatus >= 400\r\n//                 //         ? 'required-field'\r\n//                 //         : null;\r\n//                 // })()}\r\n//                 // eventHandlers={eventHandlers}\r\n//                 djsConfig={djsConfig}\r\n//             />\r\n//         </div>\r\n//     );\r\n// };\r\n//\r\n"]},"metadata":{},"sourceType":"module"}