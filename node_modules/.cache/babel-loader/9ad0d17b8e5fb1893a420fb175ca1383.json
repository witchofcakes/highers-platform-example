{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanya\\\\WebstormProjects\\\\platform\\\\client\\\\src\\\\components\\\\DropzoneResume.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DropzoneComponent } from 'react-dropzone-component'; // import 'dropzone/dist/dropzone.css';\n\nimport 'react-dropzone-component/styles/filepicker.css'; // import { employees_resumes, storage } from '../../../../configs/google/firebase/index';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BytesToMegaBytes = size => +(size * 1e-6).toFixed(2);\n\n_c = BytesToMegaBytes;\n\nconst DropzoneResume = ({\n  // Data\n  jobName,\n  errorFields,\n  errorStatus,\n  // OnChange Events\n  onChange\n}) => {\n  _s();\n\n  const [state, setState] = useState({\n    progress: null\n  });\n  const djsConfig = {\n    autoProcessQueue: false,\n    maxFiles: 1,\n    // progress: null,\n    dictDefaultMessage: 'Перетягни файл або клікни тут, щоб завантажити',\n    dictResponseError: 'Файл не завантажується :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\n    dictMaxFilesExceeded: 'Тільки один файл. Видали попередні, щоб завантажити новий.',\n    dictRemoveFile: 'Видалити файл',\n    dictCancelUpload: 'Відмінити',\n    dictUploadCanceled: 'Відмінилось',\n    dictInvalidFileType: 'Ой, такий тип файлу не підтримується',\n    dictFallbackMessage: 'Твій браузер не підтримує drag&drop. Напиши нам у Telegram, ми одразу вирішимо проблему.',\n    dictFallbackText: 'Щось тут не так :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\n    dictFileTooBig: 'Ой, файл занадто великий. Максимальний розмір 10Мб. Скористайся сервісами для зниження якості файлу.',\n    dictCancelUploadConfirmation: 'Точно відмінити завантаження?',\n    addRemoveLinks: true,\n    maxFilesize: 10\n  };\n  const componentConfig = {\n    iconFiletypes: ['.jpg', '.png', '.gif', '.pdf', '.doc', '.docx'],\n    showFiletypeIcon: false,\n    postUrl: 'no-url'\n  };\n  let dropzone = null;\n  /* Delegate the task in the Firebase method */\n\n  const onSendResume = file => onFirebaseSave(file);\n\n  const onFirebaseSave = file => {\n    /* Save current timeString */\n    const timeString = new Date().toISOString(),\n          fileName = file.name,\n          fileSize = BytesToMegaBytes(file.size),\n          fileNameFirebase = `${timeString}-${jobName}-${fileName}`;\n    /* Upload task in Firebase engine */\n\n    const uploadTask = storage.ref(`${employees_resumes}`).child(fileNameFirebase).put(file);\n    /* Push the data in the storage */\n\n    uploadTask.on('state_changed', async snapshot => {\n      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n      setState({ ...state,\n        progress: snapshot.bytesTransferred / snapshot.totalBytes * 100\n      });\n    }, err => {\n      console.log(err); // A full list of error codes is available at\n      // https://firebase.google.com/docs/storage/web/handle-errors\n    }, complete => {\n      storage.ref(employees_resumes).child(fileNameFirebase).getDownloadURL().then(url => {\n        onChange({\n          fileData: url,\n          fileName: fileName,\n          fileSize: fileSize\n        });\n      });\n    });\n  };\n\n  const onRemoveResume = file => {\n    /* Set the <unknown> filename and null file data to the resume params */\n    onChange({\n      fileName: \"<unknown>\",\n      fileSize: null,\n      fileData: null\n    });\n  }; // For a list of all possible events (there are many), see README.md!\n\n\n  const eventHandlers = {\n    init: dz => dropzone = dz,\n    drop: [// If you want to attach multiple callbacks, simply\n      // create an array filled with all your callbacks.\n    ],\n    addedfile: file => onSendResume(file),\n    complete: file => onSendResume(file),\n    removedfile: file => onRemoveResume(file)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropzone-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(DropzoneComponent, {\n      config: componentConfig,\n      className: (() => {\n        return errorFields.includes('fileData') && errorStatus >= 400 ? 'required-field' : null;\n      })(),\n      eventHandlers: eventHandlers,\n      djsConfig: djsConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DropzoneResume, \"gmVw82jMgMzK5ZBx3OSlfa26rYs=\");\n\n_c2 = DropzoneResume;\nexport { DropzoneResume as default };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BytesToMegaBytes\");\n$RefreshReg$(_c2, \"DropzoneResume\");","map":{"version":3,"sources":["C:/Users/tanya/WebstormProjects/platform/client/src/components/DropzoneResume.js"],"names":["React","useState","DropzoneComponent","BytesToMegaBytes","size","toFixed","DropzoneResume","jobName","errorFields","errorStatus","onChange","state","setState","progress","djsConfig","autoProcessQueue","maxFiles","dictDefaultMessage","dictResponseError","dictMaxFilesExceeded","dictRemoveFile","dictCancelUpload","dictUploadCanceled","dictInvalidFileType","dictFallbackMessage","dictFallbackText","dictFileTooBig","dictCancelUploadConfirmation","addRemoveLinks","maxFilesize","componentConfig","iconFiletypes","showFiletypeIcon","postUrl","dropzone","onSendResume","file","onFirebaseSave","timeString","Date","toISOString","fileName","name","fileSize","fileNameFirebase","uploadTask","storage","ref","employees_resumes","child","put","on","snapshot","bytesTransferred","totalBytes","err","console","log","complete","getDownloadURL","then","url","fileData","onRemoveResume","eventHandlers","init","dz","drop","addedfile","removedfile","includes","default"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,iBAAT,QAAkC,0BAAlC,C,CAEA;;AACA,OAAO,gDAAP,C,CAEA;;;;AAEA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU,CAAE,CAACA,IAAI,GAAG,IAAR,EAAcC,OAAd,CAAsB,CAAtB,CAArC;;KAAMF,gB;;AAGN,MAAMG,cAAc,GAAG,CAAC;AACI;AACAC,EAAAA,OAFJ;AAGIC,EAAAA,WAHJ;AAIIC,EAAAA,WAJJ;AAKI;AACAC,EAAAA;AANJ,CAAD,KAOO;AAAA;;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC;AAC/BY,IAAAA,QAAQ,EAAE;AADqB,GAAD,CAAlC;AAIA,QAAMC,SAAS,GAAG;AACdC,IAAAA,gBAAgB,EAAE,KADJ;AAEdC,IAAAA,QAAQ,EAAE,CAFI;AAGd;AACAC,IAAAA,kBAAkB,EAAE,gDAJN;AAKdC,IAAAA,iBAAiB,EACb,+EANU;AAOdC,IAAAA,oBAAoB,EAAE,4DAPR;AAQdC,IAAAA,cAAc,EAAE,eARF;AASdC,IAAAA,gBAAgB,EAAE,WATJ;AAUdC,IAAAA,kBAAkB,EAAE,aAVN;AAWdC,IAAAA,mBAAmB,EAAE,sCAXP;AAYdC,IAAAA,mBAAmB,EACf,0FAbU;AAcdC,IAAAA,gBAAgB,EACZ,wEAfU;AAgBdC,IAAAA,cAAc,EACV,sGAjBU;AAkBdC,IAAAA,4BAA4B,EAAE,+BAlBhB;AAmBdC,IAAAA,cAAc,EAAE,IAnBF;AAoBdC,IAAAA,WAAW,EAAE;AApBC,GAAlB;AAuBA,QAAMC,eAAe,GAAG;AACpBC,IAAAA,aAAa,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,OAAzC,CADK;AAEpBC,IAAAA,gBAAgB,EAAE,KAFE;AAGpBC,IAAAA,OAAO,EAAE;AAHW,GAAxB;AAMA,MAAIC,QAAQ,GAAG,IAAf;AAEA;;AACA,QAAMC,YAAY,GAAGC,IAAI,IAAIC,cAAc,CAACD,IAAD,CAA3C;;AAEA,QAAMC,cAAc,GAAGD,IAAI,IAAI;AAC3B;AACA,UACIE,UAAU,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EADjB;AAAA,UAEIC,QAAQ,GAAGL,IAAI,CAACM,IAFpB;AAAA,UAGIC,QAAQ,GAAGxC,gBAAgB,CAACiC,IAAI,CAAChC,IAAN,CAH/B;AAAA,UAIIwC,gBAAgB,GAAI,GAAEN,UAAW,IAAG/B,OAAQ,IAAGkC,QAAS,EAJ5D;AAKA;;AACA,UAAMI,UAAU,GAAGC,OAAO,CACrBC,GADc,CACT,GAAEC,iBAAkB,EADX,EAEdC,KAFc,CAERL,gBAFQ,EAGdM,GAHc,CAGVd,IAHU,CAAnB;AAIA;;AACAS,IAAAA,UAAU,CAACM,EAAX,CACI,eADJ,EAEI,MAAMC,QAAN,IAAkB;AACd;AACAxC,MAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELE,QAAAA,QAAQ,EAAGuC,QAAQ,CAACC,gBAAT,GAA4BD,QAAQ,CAACE,UAAtC,GAAoD;AAFzD,OAAD,CAAR;AAIH,KARL,EASIC,GAAG,IAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADG,CAEH;AACA;AACH,KAbL,EAcIG,QAAQ,IAAI;AACRZ,MAAAA,OAAO,CACFC,GADL,CACSC,iBADT,EAEKC,KAFL,CAEWL,gBAFX,EAGKe,cAHL,GAIKC,IAJL,CAIUC,GAAG,IAAI;AACTnD,QAAAA,QAAQ,CAAC;AACLoD,UAAAA,QAAQ,EAAED,GADL;AAELpB,UAAAA,QAAQ,EAAEA,QAFL;AAGLE,UAAAA,QAAQ,EAAEA;AAHL,SAAD,CAAR;AAKH,OAVL;AAWH,KA1BL;AA4BH,GAzCD;;AA2CA,QAAMoB,cAAc,GAAG3B,IAAI,IAAI;AAC3B;AACA1B,IAAAA,QAAQ,CAAC;AACL+B,MAAAA,QAAQ,EAAE,WADL;AAELE,MAAAA,QAAQ,EAAE,IAFL;AAGLmB,MAAAA,QAAQ,EAAE;AAHL,KAAD,CAAR;AAKH,GAPD,CAlF0B,CA2F1B;;;AACA,QAAME,aAAa,GAAG;AAClBC,IAAAA,IAAI,EAAEC,EAAE,IAAKhC,QAAQ,GAAGgC,EADN;AAElBC,IAAAA,IAAI,EAAE,CACF;AACA;AAFE,KAFY;AAMlBC,IAAAA,SAAS,EAAEhC,IAAI,IAAID,YAAY,CAACC,IAAD,CANb;AAOlBsB,IAAAA,QAAQ,EAAEtB,IAAI,IAAID,YAAY,CAACC,IAAD,CAPZ;AAQlBiC,IAAAA,WAAW,EAAEjC,IAAI,IAAI2B,cAAc,CAAC3B,IAAD;AARjB,GAAtB;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,2BACI,QAAC,iBAAD;AACI,MAAA,MAAM,EAAEN,eADZ;AAEI,MAAA,SAAS,EAAE,CAAC,MAAM;AACd,eAAOtB,WAAW,CAAC8D,QAAZ,CAAqB,UAArB,KACP7D,WAAW,IAAI,GADR,GAED,gBAFC,GAGD,IAHN;AAIH,OALU,GAFf;AAQI,MAAA,aAAa,EAAEuD,aARnB;AASI,MAAA,SAAS,EAAElD;AATf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CA7HD;;GAAMR,c;;MAAAA,c;AA+HN,SACIA,cAAc,IAAIiE,OADtB","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { DropzoneComponent } from 'react-dropzone-component';\r\n\r\n// import 'dropzone/dist/dropzone.css';\r\nimport 'react-dropzone-component/styles/filepicker.css';\r\n\r\n// import { employees_resumes, storage } from '../../../../configs/google/firebase/index';\r\n\r\nconst BytesToMegaBytes = (size) => +((size * 1e-6).toFixed(2));\r\n\r\n\r\nconst DropzoneResume = ({\r\n                            // Data\r\n                            jobName,\r\n                            errorFields,\r\n                            errorStatus,\r\n                            // OnChange Events\r\n                            onChange\r\n                        }) => {\r\n    const [state, setState] = useState({\r\n        progress: null\r\n    });\r\n\r\n    const djsConfig = {\r\n        autoProcessQueue: false,\r\n        maxFiles: 1,\r\n        // progress: null,\r\n        dictDefaultMessage: 'Перетягни файл або клікни тут, щоб завантажити',\r\n        dictResponseError:\r\n            'Файл не завантажується :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\r\n        dictMaxFilesExceeded: 'Тільки один файл. Видали попередні, щоб завантажити новий.',\r\n        dictRemoveFile: 'Видалити файл',\r\n        dictCancelUpload: 'Відмінити',\r\n        dictUploadCanceled: 'Відмінилось',\r\n        dictInvalidFileType: 'Ой, такий тип файлу не підтримується',\r\n        dictFallbackMessage:\r\n            'Твій браузер не підтримує drag&drop. Напиши нам у Telegram, ми одразу вирішимо проблему.',\r\n        dictFallbackText:\r\n            'Щось тут не так :( Напиши нам у Telegram, ми одразу вирішимо проблему.',\r\n        dictFileTooBig:\r\n            'Ой, файл занадто великий. Максимальний розмір 10Мб. Скористайся сервісами для зниження якості файлу.',\r\n        dictCancelUploadConfirmation: 'Точно відмінити завантаження?',\r\n        addRemoveLinks: true,\r\n        maxFilesize: 10,\r\n    };\r\n\r\n    const componentConfig = {\r\n        iconFiletypes: ['.jpg', '.png', '.gif', '.pdf', '.doc', '.docx'],\r\n        showFiletypeIcon: false,\r\n        postUrl: 'no-url',\r\n    };\r\n\r\n    let dropzone = null;\r\n\r\n    /* Delegate the task in the Firebase method */\r\n    const onSendResume = file => onFirebaseSave(file);\r\n\r\n    const onFirebaseSave = file => {\r\n        /* Save current timeString */\r\n        const\r\n            timeString = new Date().toISOString(),\r\n            fileName = file.name,\r\n            fileSize = BytesToMegaBytes(file.size),\r\n            fileNameFirebase = `${timeString}-${jobName}-${fileName}`;\r\n        /* Upload task in Firebase engine */\r\n        const uploadTask = storage\r\n            .ref(`${employees_resumes}`)\r\n            .child(fileNameFirebase)\r\n            .put(file);\r\n        /* Push the data in the storage */\r\n        uploadTask.on(\r\n            'state_changed',\r\n            async snapshot => {\r\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                setState({\r\n                    ...state,\r\n                    progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\r\n                });\r\n            },\r\n            err => {\r\n                console.log(err);\r\n                // A full list of error codes is available at\r\n                // https://firebase.google.com/docs/storage/web/handle-errors\r\n            },\r\n            complete => {\r\n                storage\r\n                    .ref(employees_resumes)\r\n                    .child(fileNameFirebase)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        onChange({\r\n                            fileData: url,\r\n                            fileName: fileName,\r\n                            fileSize: fileSize\r\n                        });\r\n                    });\r\n            },\r\n        );\r\n    };\r\n\r\n    const onRemoveResume = file => {\r\n        /* Set the <unknown> filename and null file data to the resume params */\r\n        onChange({\r\n            fileName: \"<unknown>\",\r\n            fileSize: null,\r\n            fileData: null,\r\n        });\r\n    };\r\n\r\n    // For a list of all possible events (there are many), see README.md!\r\n    const eventHandlers = {\r\n        init: dz => (dropzone = dz),\r\n        drop: [\r\n            // If you want to attach multiple callbacks, simply\r\n            // create an array filled with all your callbacks.\r\n        ],\r\n        addedfile: file => onSendResume(file),\r\n        complete: file => onSendResume(file),\r\n        removedfile: file => onRemoveResume(file)\r\n    };\r\n\r\n    return (\r\n        <div className=\"dropzone-wrapper\">\r\n            <DropzoneComponent\r\n                config={componentConfig}\r\n                className={(() => {\r\n                    return errorFields.includes('fileData') &&\r\n                    errorStatus >= 400\r\n                        ? 'required-field'\r\n                        : null;\r\n                })()}\r\n                eventHandlers={eventHandlers}\r\n                djsConfig={djsConfig}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {\r\n    DropzoneResume as default\r\n};"]},"metadata":{},"sourceType":"module"}